#include <iostream>
#include <vector>
#include <functional>
#include <stdexcept>

// 定义一个函数指针类型，用于指向四则运算的函数
typedef double (*OperationFunc)(const std::vector<double>&);

// 实现加法运算
double add(const std::vector<double>& numbers) {
    double result = 0;
    for (double num : numbers) {
        result += num;
    }
    return result;
}

// 实现减法运算，第一个数减去后面的所有数
double minus(const std::vector<double>& numbers) {
    if (numbers.size() < 2) {
        throw std::invalid_argument("minus operation requires at least two numbers.");
    }
    double result = numbers[0];
    for (size_t i = 1; i < numbers.size(); ++i) {
        result -= numbers[i];
    }
    return result;
}

// 实现乘法运算
double multiply(const std::vector<double>& numbers) {
    double result = 1;
    for (double num : numbers) {
        result *= num;
    }
    return result;
}

// 实现除法运算，第一个数除以后面的所有数
double divide(const std::vector<double>& numbers) {
    if (numbers.size() < 2) {
        throw std::invalid_argument("divide operation requires at least two numbers.");
    }
    double result = numbers[0];
    for (size_t i = 1; i < numbers.size(); ++i) {
        if (numbers[i] == 0) {
            throw std::runtime_error("Division by zero is not allowed.");
        }
        result /= numbers[i];
    }
    return result;
}

// 计算器函数，根据提供的函数指针执行相应的运算
double cal(OperationFunc func, const std::vector<double>& numbers) {
    return func(numbers);
}

int main() {
    std::vector<double> numbers = {10, 20, 30, 40}; // 示例数字列表

    try {
        std::cout << "Addition result: " << cal(add, numbers) << std::endl;
        std::cout << "Subtraction result: " << cal(minus, numbers) << std::endl;
        std::cout << "Multiplication result: " << cal(multiply, numbers) << std::endl;
        std::cout << "Division result: " << cal(divide, numbers) << std::endl;
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
